
map :: (a -> b) -> [a] -> [b]  
map _ [] = []  
map f (x:xs) = f x : HS6_3.map f xs  

map (+3) [1,5,3,1,6] 
--[4,8,6,4,9]
map (++ "!") ["BIFF", "BANG", "POW"] 
--["BIFF!","BANG!","POW!"]
map (replicate 3) [3..6] 
--[[3,3,3],[4,4,4],[5,5,5],[6,6,6]]
map (map (^2)) [[1,2],[3,4,5,6],[7,8]] 
--[[1 ,4] ,[9 ,16 ,25 ,36] ,[49 ,64]]
map fst [(1 ,2) ,(3 ,5) ,(6 ,3) ,(2 ,6) ,(2 ,5)] 
--[1,3,6,2,2]

:{
{--
filter :: (a -> Bool) -> [a] -> [a]  
filter _ [] = []  
filter p (x:xs)   
    | p x       = x : HS6_3.filter p xs  
    | otherwise = HS6_3.filter p xs  


HS6_3.filter (>3) [1,5,3,2,1,6,4,3,2,1]  
--[5,6,4]  
HS6_3.filter (==3) [1,2,3,4,5]  
--[3]  
HS6_3.filter even [1..10]  
--[2,4,6,8,10]  
let notNull x = not (null x) in HS6_3.filter notNull [[1,2,3],[],[3,4,5],[2,2],[],[],[]]  
--[[1,2,3],[3,4,5],[2,2]]  
HS6_3.filter (`elem` ['a'..'z']) "u LaUgH aT mE BeCaUsE I aM diFfeRent"  
--"uagameasadifeent"  
HS6_3.filter (`elem` ['A'..'Z']) "i lauGh At You BecAuse u r aLL the Same"  
--"GAYBALLS"  


quicksort :: (Ord a) => [a] -> [a]    
quicksort [] = []    
quicksort (x:xs) =     
    let smallerSorted = quicksort (HS6_3.filter (<=x) xs)  
        biggerSorted = quicksort (HS6_3.filter (>x) xs)   
    in  smallerSorted ++ [x] ++ biggerSorted  


largestDivisible :: (Integral a) => a  
largestDivisible = head (HS6_3.filter p [100000,99999..])  
    where p x = x `mod` 3829 == 0  


sum (takeWhile (<10000) (HS6_3.filter odd (HS6_3.map (^2) [1..])))  
--166650  

sum (takeWhile (<10000) [n^2 | n <- [1..], odd (n^2)])  
--166650 

    
chain :: (Integral a) => a -> [a]  
chain 1 = [1]  
chain n  
    | even n =  n:chain (n `div` 2)  
    | odd n  =  n:chain (n*3 + 1) 

chain 10  
--[10,5,16,8,4,2,1]  
chain 1  
--[1]  
chain 30  
--[30,15,46,23,70,35,106,53,160,80,40,20,10,5,16,8,4,2,1]  


numLongChains :: Int  
numLongChains = length (HS6_3.filter isLong (HS6_3.map chain [1..100]))  
    where isLong xs = length xs > 15


let listOfFuns = HS6_3.map (*) [0..]  
(listOfFuns !! 4) 5  
--20  
--}
:}


