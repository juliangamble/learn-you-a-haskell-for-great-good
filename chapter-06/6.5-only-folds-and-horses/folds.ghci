
:{
sum' :: (Num a) => [a] -> a
sum' xs = foldl (\acc x -> acc + x) 0 xs  
:}

sum' [3,5,2,1]  
--11  


:{
sum'' :: (Num a) => [a] -> a  
sum'' = foldl (+) 0 
:}

:{
elem' :: (Eq a) => a -> [a] -> Bool  
elem' y ys = foldl (\acc x -> if x == y then True else acc) False ys 
:}

:{
map' :: (a -> b) -> [a] -> [b]  
map' f xs = foldr (\x acc -> f x : acc) [] xs  
:}

:{
maximum' :: (Ord a) => [a] -> a  
maximum' = foldr1 (\x acc -> if x > acc then x else acc)  
:}

:{
reverse' :: [a] -> [a]  
reverse' = foldl (\acc x -> x : acc) []  
:}

:{
product' :: (Num a) => [a] -> a  
product' = foldr1 (*)  
:}

:{
filter' :: (a -> Bool) -> [a] -> [a]  
filter' p = foldr (\x acc -> if p x then x : acc else acc) []  
:}

:{
head' :: [a] -> a  
head' = foldr1 (\x _ -> x)  
:}

:{
last' :: [a] -> a  
last' = foldl1 (\_ x -> x)  
:}


scanl (+) 0 [3,5,2,1]  
--[0,3,8,10,11]  
scanr (+) 0 [3,5,2,1]  
--[11,8,3,1,0]  
scanl1 (\acc x -> if x > acc then x else acc) [3,4,5,3,7,9,2,1]  
--[3,4,5,5,7,9,9,9]  
scanl (flip (:)) [] [3,2,1]  
--[[],[3],[2,3],[1,2,3]]


:{
sqrtSums :: Int  
sqrtSums = length (takeWhile (<1000) (scanl1 (+) (map sqrt [1..]))) + 1
:}


sqrtSums  
--131  
sum (map sqrt [1..131])  
--1005.0942035344083  
sum (map sqrt [1..130])  
--993.6486803921487  
