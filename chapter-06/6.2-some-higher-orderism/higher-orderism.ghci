applyTwice :: (a -> a) -> a -> a  
applyTwice f x = f (f x)  

applyTwice (+3) 10
--16  
applyTwice (++ " HAHA") "HEY"  
--"HEY HAHA HAHA"  
applyTwice ("HAHA " ++) "HEY"  
--"HAHA HAHA HEY"  
applyTwice (multThree 2 2) 9  
--144  
applyTwice (3:) [1]  
--[3,3,1] 


zipWith' :: (a -> b -> c) -> [a] -> [b] -> [c]  
zipWith' _ [] _ = []  
zipWith' _ _ [] = []  
zipWith' f (x:xs) (y:ys) = f x y : zipWith' f xs ys  

zipWith' (+) [4,2,5,6] [2,6,2,3]  
--[6,8,7,9]  
zipWith' max [6,3,2,1] [7,3,1,5]  
--[7,3,2,5]  
zipWith' (++) ["foo ", "bar ", "baz "]["fighters", "hoppers", "aldrin"]  
--["foo fighters","bar hoppers","baz aldrin"]  
zipWith' (*) (replicate 5 2) [1..]  
--[2,4,6,8,10]  
zipWith' (zipWith' (*)) [[1,2,3],[3,5,6],[2,3,4]] [[3,2,2],[3,4,5],[5,4,3]]  
--[[3,4,6],[9,20,30],[10,12,12]]  


flip' :: (a -> b -> c) -> (b -> a -> c)  
flip' f = g  
    where g x y = f y x  
    
flip'' :: (a -> b -> c) -> b -> a -> c  
flip'' f y x = f x y  

flip'' zip [1,2,3,4,5] "hello"  
--[('h',1),('e',2),('l',3),('l',4),('o',5)]  
zipWith (flip'' div) [2,2..] [10,8,6,4,2]  
--[5,4,3,2,1]  
