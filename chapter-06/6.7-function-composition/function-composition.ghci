
map (\x -> negate (abs x)) [5,-3,-6,7,-3,2,-19,24]  
--[-5,-3,-6,-7,-3,-2,-19,-24]  

map (negate . abs) [5,-3,-6,7,-3,2,-19,24]  
--[-5,-3,-6,-7,-3,-2,-19,-24]  

map (\xs -> negate (sum (tail xs))) [[1..5],[3..6],[1..7]]  
--[-14,-15,-27]

map (negate . sum . tail) [[1..5],[3..6],[1..7]]  
--[-14,-15,-27] 

:{
sum' :: (Num a) => [a] -> a     
sum' xs = foldl (+) 0 xs  
:}

fn' x = ceiling (negate (tan (cos (max 50 x)))) 


fn = ceiling . negate . tan . cos . max 50  

:{
oddSquareSum :: Integer  
oddSquareSum = sum (takeWhile (<10000) (filter odd (map (^2) [1..])))     
:}

:{
oddSquareSum' :: Integer  
oddSquareSum' = sum . takeWhile (<10000) . filter odd . map (^2) $ [1..] 
:}

:{
oddSquareSum'' :: Integer  
oddSquareSum'' =   
    let oddSquares = filter odd $ map (^2) [1..]  
        belowLimit = takeWhile (<10000) oddSquares  
    in  sum belowLimit  
:}
