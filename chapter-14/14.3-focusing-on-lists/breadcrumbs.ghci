data Tree a = Empty | Node a (Tree a) (Tree a) deriving (Show)  

:{
freeTree :: Tree Char  
freeTree =   
    Node 'P'  
        (Node 'O'  
            (Node 'L'  
                (Node 'N' Empty Empty)  
                (Node 'T' Empty Empty)  
            )  
            (Node 'Y'  
                (Node 'S' Empty Empty)  
                (Node 'A' Empty Empty)  
            )  
        )  
        (Node 'L'  
            (Node 'W'  
                (Node 'C' Empty Empty)  
                (Node 'R' Empty Empty)  
            )  
            (Node 'A'  
                (Node 'A' Empty Empty)  
                (Node 'C' Empty Empty)  
            )  
        )  
:}

data Direction = L | R deriving (Show)  
type Directions = [Direction]  

---

type Breadcrumbs = [Direction]  

:{
goLeft :: (Tree a, Breadcrumbs) -> (Tree a, Breadcrumbs)
goLeft (Node _ l _, bs) = (l, L:bs)
:}

:{
goRight :: (Tree a, Breadcrumbs) -> (Tree a, Breadcrumbs)
goRight (Node _ _ r, bs) = (r, R:bs)
:}

goLeft (goRight (freeTree, []))
--(Node 'W' (Node 'C' Empty Empty) (Node 'R' Empty Empty),[L,R])

x -: f = f x  


(freeTree, []) -: goRight -: goLeft
--(Node 'W' (Node 'C' Empty Empty) (Node 'R' Empty Empty),[L,R])  

data Crumb a = LeftCrumb a (Tree a) | RightCrumb a (Tree a) deriving (Show)  

type Breadcrumbs a = [Crumb a]  

:{
goLeft :: (Tree a, Breadcrumbs a) -> (Tree a, Breadcrumbs a)
goLeft (Node x l r, bs) = (l, LeftCrumb x r:bs)
:}

:{
goRight :: (Tree a, Breadcrumbs a) -> (Tree a, Breadcrumbs a)
goRight (Node x l r, bs) = (r, RightCrumb x l:bs)
:}

:{
goUp :: (Tree a, Breadcrumbs a) -> (Tree a, Breadcrumbs a)
goUp (t, LeftCrumb x r:bs) = (Node x t r, bs)
goUp (t, RightCrumb x l:bs) = (Node x l t, bs)
:}

type Zipper a = (Tree a, Breadcrumbs a)  

:{
modify :: (a -> a) -> Zipper a -> Zipper a
modify f (Node x l r, bs) = (Node (f x) l r, bs)
modify f (Empty, bs) = (Empty, bs)
:}

let newFocus = modify (\_ -> 'P') (goRight (goLeft (freeTree,[]))) 

let newFocus = (freeTree,[]) -: goLeft -: goRight -: modify (\_ -> 'P')

let newFocus2 = modify (\_ -> 'X') (goUp newFocus)

let newFocus2 = newFocus -: goUp -: modify (\_ -> 'X')

:{
attach :: Tree a -> Zipper a -> Zipper a
attach t (_, bs) = (t, bs)
:}

let farLeft = (freeTree,[]) -: goLeft -: goLeft -: goLeft -: goLeft

let newFocus = farLeft -: attach (Node 'Z' Empty Empty)

:{
topMost :: Zipper a -> Zipper a
topMost (t,[]) = (t,[])
topMost z = topMost (goUp z)
:}


