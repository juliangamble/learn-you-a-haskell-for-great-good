import Data.List

intersperse '.' "MONKEY"  
--"M.O.N.K.E.Y"  
 intersperse 0 [1,2,3,4,5,6]  
--[1,0,2,0,3,0,4,0,5,0,6]  

intercalate " " ["hey","there","guys"]  
--"hey there guys"  
 intercalate [0,0,0] [[1,2,3],[4,5,6],[7,8,9]]  
--[1,2,3,0,0,0,4,5,6,0,0,0,7,8,9]  

transpose [[1,2,3],[4,5,6],[7,8,9]]  
--[[1,4,7],[2,5,8],[3,6,9]]  
 transpose ["hey","there","guys"]  
--["htg","ehu","yey","rs","e"]  



map sum $ transpose [[0,3,5,9],[10,0,0,9],[8,5,1,-1]]  
--[18,8,6,17]  

concat ["foo","bar","car"]  
--"foobarcar"  
 concat [[3,4,5],[2,3,4],[2,1,1]]  
--[3,4,5,2,3,4,2,1,1] 

concatMap (replicate 4) [1..3]  
--[1,1,1,1,2,2,2,2,3,3,3,3]  


and $ map (>4) [5,6,7,8]  
--True  
 and $ map (==4) [4,4,4,3,4]  
--False  


or $ map (==4) [2,3,4,5,6,1]  
--True  
 or $ map (>4) [1,2,3]  
--False  



any (==4) [2,3,5,6,1,4]  
--True  
 all (>4) [6,9,10]  
--True  
 all (`elem` ['A'..'Z']) "HEYGUYSwhatsup"  
--False  
 any (`elem` ['A'..'Z']) "HEYGUYSwhatsup"  
--True  



take 10 $ iterate (*2) 1  
--[1,2,4,8,16,32,64,128,256,512]  
 take 3 $ iterate (++ "haha") "haha"  
--["haha","hahahaha","hahahahahaha"]  



splitAt 3 "heyman"  
--("hey","man")  
 splitAt 100 "heyman"  
--("heyman","")  
 splitAt (-3) "heyman"  
--("","heyman")  
 let (a,b) = splitAt 3 "foobar" in b ++ a  
--"barfoo"  


takeWhile (>3) [6,5,4,3,2,1,2,3,4,5,4,3,2,1]  
--[6,5,4]  
 takeWhile (/=' ') "This is a sentence"  
--"This"  


sum $ takeWhile (<10000) $ map (^3) [1..]  
--53361  


dropWhile (/=' ') "This is a sentence"  
--" is a sentence"  
 dropWhile (<3) [1,2,2,2,3,4,5,4,3,2,1]  
--[3,4,5,4,3,2,1] 


let stock = [(994.4,2008,9,1),(995.2,2008,9,2),(999.2,2008,9,3),(1001.4,2008,9,4),(998.3,2008,9,5)]  



head (dropWhile (\(val,y,m,d) -> val < 1000) stock)  
--(1001.4,2008,9,4)  


let (fw, rest) = span (/=' ') "This is a sentence" in "First word:" ++ fw ++ ", the rest:" ++ rest  
--"First word: This, the rest: is a sentence" 



break (==4) [1,2,3,4,5,6,7]  
--([1,2,3],[4,5,6,7])  
 span (/=4) [1,2,3,4,5,6,7]  
--([1,2,3],[4,5,6,7])  


sort [8,5,3,2,1,6,4,2]  
--[1,2,2,3,4,5,6,8]  
 sort "This will be sorted soon"  
--"    Tbdeehiillnooorssstw"  


group [1,1,1,1,2,2,2,2,3,3,2,2,2,5,6,7]  
--[[1,1,1,1],[2,2,2,2],[3,3],[2,2,2],[5],[6],[7]]  


map (\l@(x:xs) -> (x,length l)) . group . sort $ [1,1,1,1,2,2,2,2,3,3,2,2,2,5,6,7]  
--[(1,4),(2,7),(3,2),(5,1),(6,1),(7,1)]  


inits "w00t"  
--["","w","w0","w00","w00t"]  
 tails "w00t"  
--["w00t","00t","0t","t",""]  
 let w = "w00t" in zip (inits w) (tails w)  
--[("","w00t"),("w","00t"),("w0","0t"),("w00","t"),("w00t","")]  


:{
search :: (Eq a) => [a] -> [a] -> Bool
search needle haystack =
    let nlen = length needle
    in  foldl (\acc x -> if take nlen x == needle then True else acc) False (tails haystack)
:}


"cat" `isInfixOf` "im a cat burglar"  
--True  
 "Cat" `isInfixOf` "im a cat burglar"  
--False  
 "cats" `isInfixOf` "im a cat burglar"  
--False  


"hey" `isPrefixOf` "hey there!"  
--True  
 "hey" `isPrefixOf` "oh hey there!"  
--False  
 "there!" `isSuffixOf` "oh hey there!"  
--True  
 "there!" `isSuffixOf` "oh hey there"  
--False  
 

partition (`elem` ['A'..'Z']) "BOBsidneyMORGANeddy"  
("BOBMORGAN","sidneyeddy")  
partition (>3) [1,3,5,6,3,2,1,0,3,7]  
--([5,6,7],[1,3,3,2,1,0,3])  


span (`elem` ['A'..'Z']) "BOBsidneyMORGANeddy"  
--("BOB","sidneyMORGANeddy")  


find (>4) [1,2,3,4,5,6]  
--Just 5  
find (>9) [1,2,3,4,5,6]  
--Nothing  

:t find  
--find :: (a -> Bool) -> [a] -> Maybe a  


:t elemIndex  
--elemIndex :: (Eq a) => a -> [a] -> Maybe Int  
 4 `elemIndex` [1,2,3,4,5,6]  
--Just 3  
 10 `elemIndex` [1,2,3,4,5,6]  
--Nothing  


' ' `elemIndices` "Where are the spaces?"  
--[5,9,13]  


findIndex (==4) [5,3,2,1,6,4]  
--Just 5  
 findIndex (==7) [5,3,2,1,6,4]  
--Nothing  
 findIndices (`elem` ['A'..'Z']) "Where Are The Caps?"  
--[0,6,10,14]  


zipWith3 (\x y z -> x + y + z) [1,2,3] [4,5,2,2] [2,2,3]  
--[7,9,8]  
 zip4 [2,3,3] [2,2,2] [5,5,3] [2,2,2]  
--[(2,2,5,2),(3,2,5,2),(3,2,3,2)]  


lines "first line\nsecond line\nthird line"  
--["first line","second line","third line"]  


unlines ["first line", "second line", "third line"]  
--"first line\nsecond line\nthird line\n"  


words "hey these are the words in this sentence"  
--["hey","these","are","the","words","in","this","sentence"]  
 words "hey these           are    the words in this\nsentence"  
--["hey","these","are","the","words","in","this","sentence"]  
 unwords ["hey","there","mate"]  
--"hey there mate"  


nub [1,2,3,4,3,2,1,2,3,4,3,2,1]  
--[1,2,3,4]  
 nub "Lots of words and stuff"  
--"Lots fwrdanu" 


delete 'h' "hey there ghang!"  
--"ey there ghang!"  
 delete 'h' . delete 'h' $ "hey there ghang!"  
--"ey tere ghang!"  
 delete 'h' . delete 'h' . delete 'h' $ "hey there ghang!"  
--"ey tere gang!"  


[1..10] \\ [2,5,9]  
--[1,3,4,6,7,8,10]  
 "Im a big baby" \\ "big"  
--"Im a  baby"  


"hey man" `union` "man what's up"  
--"hey manwt'sup"  
 [1..7] `union` [5..10]  
--[1,2,3,4,5,6,7,8,9,10]  


[1..7] `intersect` [5..10]  
--[5,6,7]  


insert 4 [3,5,1,2,8,2]  
--[3,4,5,1,2,8,2]  
 insert 4 [1,3,4,4,1]  
--[1,3,4,4,4,1]  


insert 4 [1,2,3,5,6,7]  
--[1,2,3,4,5,6,7]  
 insert 'g' $ ['a'..'f'] ++ ['h'..'z']  
--"abcdefghijklmnopqrstuvwxyz"  
 insert 3 [1,2,4,3,2,1]  
--[1,2,3,4,3,2,1]  


let values = [-4.3, -2.4, -1.2, 0.4, 2.3, 5.9, 10.5, 29.1, 5.3, -2.4, -14.5, 2.9, 2.3]  
groupBy (\x y -> (x > 0) == (y > 0)) values  
--[[-4.3,-2.4,-1.2],[0.4,2.3,5.9,10.5,29.1,5.3],[-2.4,-14.5],[2.9,2.3]] 

:{
on :: (b -> b -> c) -> (a -> b) -> a -> a -> c
f `on` g = \x y -> f (g x) (g y)
:}

groupBy ((==) `on` (> 0)) values  
--[[-4.3,-2.4,-1.2],[0.4,2.3,5.9,10.5,29.1,5.3],[-2.4,-14.5],[2.9,2.3]] 


let xs = [[5,4,5,4,4],[1,2,3],[3,5,4,3],[],[2],[2,2]]  
sortBy (compare `on` length) xs  
--[[],[2],[2,2],[1,2,3],[3,5,4,3],[5,4,5,4,4]]  



