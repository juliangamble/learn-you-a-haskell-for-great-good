import Data.List
import Data.Char
import Data.Function

words "hey guys its me"  
--["hey","guys","its","me"]  
groupBy ((==) `on` isSpace) "hey guys its me"  
--["hey"," ","guys"," ","its"," ","me"]  


filter (not . any isSpace) . groupBy ((==) `on` isSpace) $ "hey guys its me"  
--["hey","guys","its","me"]  

generalCategory ' '  
--Space  
generalCategory 'A'  
--UppercaseLetter  
generalCategory 'a'  
--LowercaseLetter  
generalCategory '.'  
--OtherPunctuation  
generalCategory '9'  
--DecimalNumber  
map generalCategory " \t\nA9?|"  
--[Space,Control,Control,UppercaseLetter,DecimalNumber,OtherPunctuation,MathSymbol]

map digitToInt "34538"  
--[3,4,5,3,8]  
map digitToInt "FF85AB"  
--[15,15,8,5,10,11] 

intToDigit 15  
--'f'  
intToDigit 5  
--'5'  


ord 'a'  
--97  
chr 97  
--'a'  
map ord "abcdefgh"  
--[97,98,99,100,101,102,103,104]


:{
encode :: Int -> String -> String  
encode shift msg = 
    let ords = map ord msg  
        shifted = map (+ shift) ords  
    in  map chr shifted  
:}


encode 3 "Heeeeey"  
--"Khhhhh|"  
encode 4 "Heeeeey"  
--"Liiiii}"  
encode 1 "abcd"  
--"bcde"  
encode 5 "Marry Christmas! Ho ho ho!"  
--"Rfww~%Hmwnxyrfx&%Mt%mt%mt&"  


:{
decode :: Int -> String -> String  
decode shift msg = encode (negate shift) msg
:}



encode 3 "Im a little teapot"  
--"Lp#d#olwwoh#whdsrw"  
 decode 3 "Lp#d#olwwoh#whdsrw"  
--"Im a little teapot"  
 decode 5 . encode 5 $ "This is a sentence"  
--"This is a sentence" 

