:t fmap (++) (Just "hey")  
--fmap (++) (Just "hey") :: Maybe ([Char] -> [Char])  
:t fmap compare (Just 'a')  
--fmap compare (Just 'a') :: Maybe (Char -> Ordering)  
:t fmap compare "A LIST OF CHARS"  
--fmap compare "A LIST OF CHARS" :: [Char -> Ordering]  
:t fmap (\x y z -> x + y / z) [3,4,5,6]  
--fmap (\x y z -> x + y / z) [3,4,5,6] :: (Fractional a) => [a -> a -> a]  

let a = fmap (*) [1,2,3,4]  
:t a  
--a :: [Integer -> Integer]  
fmap (\f -> f 9) a  
--[9,18,27,36]  

Just (+3) <*> Just 9  
--Just 12  
pure (+3) <*> Just 10  
--Just 13  
pure (+3) <*> Just 9  
--Just 12  
Just (++"hahah") <*> Nothing  
--Nothing  
Nothing <*> Just "woot"  
--Nothing  


pure (+) <*> Just 3 <*> Just 5  
--Just 8  
pure (+) <*> Just 3 <*> Nothing  
--Nothing  
pure (+) <*> Nothing <*> Just 5  
--Nothing  


(++) <$> Just "johntra" <*> Just "volta"  
--Just "johntravolta" 


(++) "johntra" "volta"  
"johntravolta"  

pure "Hey" :: [String]  
--["Hey"]  
pure "Hey" :: Maybe String  
--Just "Hey"  


[(*0),(+100),(^2)] <*> [1,2,3]  
--[0,0,0,101,102,103,1,4,9] 

[(+),(*)] <*> [1,2] <*> [3,4]  
--[4,5,5,6,3,4,6,8]  


(++) <$> ["ha","heh","hmm"] <*> ["?","!","."]  
--["ha?","ha!","ha.","heh?","heh!","heh.","hmm?","hmm!","hmm."]  


[ x*y | x <- [2,5,10], y <- [8,10,11]]     
--[16,20,22,40,50,55,80,100,110]  

(*) <$> [2,5,10] <*> [8,10,11]  
--[16,20,22,40,50,55,80,100,110]  


filter (>50) $ (*) <$> [2,5,10] <*> [8,10,11]  
--[55,80,100,110]  


(pure 3) "blah"  
--3  

pure 3 "blah"  
--3

:t (+) <$> (+3) <*> (*100)  
--(+) <$> (+3) <*> (*100) :: (Num a) => a -> a  
(+) <$> (+3) <*> (*100) $ 5  
--508  

(\x y z -> [x,y,z]) <$> (+3) <*> (*2) <*> (/2) $ 5  
--[8.0,10.0,2.5]  

import Control.Applicative

getZipList $ (+) <$> ZipList [1,2,3] <*> ZipList [100,100,100]  
--[101,102,103]  
getZipList $ (+) <$> ZipList [1,2,3] <*> ZipList [100,100..]  
--[101,102,103]  
getZipList $ max <$> ZipList [1,2,3,4,5,3] <*> ZipList [5,3,1,2]  
--[5,3,3,4]  
getZipList $ (,,) <$> ZipList "dog" <*> ZipList "cat" <*> ZipList "rat"  
---[('d','c','r'),('o','a','a'),('g','t','t')]  


fmap (\x -> [x]) (Just 4)  
--Just [4] 

liftA2 (:) (Just 3) (Just [4])  
--Just [3,4]  
(:) <$> Just 3 <*> Just [4]  
--Just [3,4]  


--sequenceA :: (Applicative f) => [f a] -> f [a]  
sequenceA [] = pure []  
sequenceA (x:xs) = (:) <$> x <*> sequenceA xs

sequenceA = foldr (liftA2 (:)) (pure [])  


sequenceA [Just 3, Just 2, Just 1]  
--Just [3,2,1]  
sequenceA [Just 3, Nothing, Just 1]  
--Nothing  
sequenceA [(+3),(+2),(+1)] 3  
--[6,5,4]  
sequenceA [[1,2,3],[4,5,6]]  
--[[1,4],[1,5],[1,6],[2,4],[2,5],[2,6],[3,4],[3,5],[3,6]]  
sequenceA [[1,2,3],[4,5,6],[3,4,4],[]]  
--[]  


map (\f -> f 7) [(>4),(<10),odd]  
--[True,True,True]  
and $ map (\f -> f 7) [(>4),(<10),odd]  
--True  


sequenceA [(>4),(<10),odd] 7  
--[True,True,True]  
and $ sequenceA [(>4),(<10),odd] 7  
--True  


sequenceA [[1,2,3],[4,5,6]]  
--[[1,4],[1,5],[1,6],[2,4],[2,5],[2,6],[3,4],[3,5],[3,6]]  
[[x,y] | x <- [1,2,3], y <- [4,5,6]]  
--[[1,4],[1,5],[1,6],[2,4],[2,5],[2,6],[3,4],[3,5],[3,6]]  
sequenceA [[1,2],[3,4]]  
--[[1,3],[1,4],[2,3],[2,4]]  
[[x,y] | x <- [1,2], y <- [3,4]]  
--[[1,3],[1,4],[2,3],[2,4]]  
sequenceA [[1,2],[3,4],[5,6]]  
--[[1,3,5],[1,3,6],[1,4,5],[1,4,6],[2,3,5],[2,3,6],[2,4,5],[2,4,6]]  
[[x,y,z] | x <- [1,2], y <- [3,4], z <- [5,6]]  
--[[1,3,5],[1,3,6],[1,4,5],[1,4,6],[2,3,5],[2,3,6],[2,4,5],[2,4,6]] 


sequenceA [getLine, getLine, getLine]  
--heyh  
--ho  
--woo  
--["heyh","ho","woo"]  



