
:{
--cylinder :: (RealFloat a) => a -> a -> a  
cylinder r h = 
    let sideArea = 2 * pi * r * h  
        topArea = pi * r ^2  
    in  sideArea + 2 * topArea  
:}





[if 5 > 3 then "Woo" else "Boo", if 'a' > 'b' then "Foo" else "Bar"]  
--["Woo", "Bar"]  
4 * (if 10 > 5 then 10 else 0) + 2  
--42  


4 * (let a = 9 in a + 1) + 2  
--42 

[let square x = x * x in (square 5, square 3, square 2)]  
--[(25,9,4)]  


(let a = 100; b = 200; c = 300 in a*b*c, let foo="Hey "; bar = "there!" in foo ++ bar)  
--(6000000,"Hey there!")  

(let (a,b,c) = (1,2,3) in a+b+c) * 100  
--600  


:{
{--
calcBmis :: (RealFloat a) => [(a, a)] -> [a]  
calcBmis xs = [bmi | (w, h) <- xs, let bmi = w / h ^ 2]  
--}
:}

--calcBmis :: (RealFloat a) => [(a, a)] -> [a]  
calcBmis xs = [bmi | (w, h) <- xs, let bmi = w / h ^ 2, bmi >= 25.0] 


let zoot x y z = x * y + z  
zoot 3 9 2  
--29  
let boot x y z = x * y + z in boot 3 4 2  
--14  
boot  
-- <interactive>:1:0: Not in scope: `boot'  






