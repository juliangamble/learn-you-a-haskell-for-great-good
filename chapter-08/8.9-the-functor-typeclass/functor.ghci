:{
class Functor f where  
    fmap :: (a -> b) -> f a -> f b  
:}

:{
instance Functor [] where  
    fmap = map  
:}

--map :: (a -> b) -> [a] -> [b]  
fmap (*2) [1..3]  
--[2,4,6]  
map (*2) [1..3]  
--[2,4,6]  

:{
instance Functor Maybe where  
    fmap f (Just x) = Just (f x)  
    fmap f Nothing = Nothing  
:}

fmap (++ " HEY GUYS IM INSIDE THE JUST") (Just "Something serious.")  
--Just "Something serious. HEY GUYS IM INSIDE THE JUST"  
fmap (++ " HEY GUYS IM INSIDE THE JUST") Nothing  
--Nothing  
fmap (*2) (Just 200)  
--Just 400  
fmap (*2) Nothing  
--Nothing  

data Tree a = EmptyTree | Node a (Tree a) (Tree a) deriving (Show, Read, Eq)  

:{
instance Functor Tree where  
    fmap f EmptyTree = EmptyTree  
    fmap f (Node x leftsub rightsub) = Node (f x) (fmap f leftsub) (fmap f rightsub)    
:}

:{
singleton :: a -> Tree a  
singleton x = Node x EmptyTree EmptyTree  
  
treeInsert :: (Ord a) => a -> Tree a -> Tree a  
treeInsert x EmptyTree = singleton x  
treeInsert x (Node a left right)   
    | x == a = Node x left right  
    | x < a  = Node a (treeInsert x left) right  
    | x > a  = Node a left (treeInsert x right) 
:}


fmap (*2) EmptyTree  
--EmptyTree  
fmap (*4) (foldr treeInsert EmptyTree [5,7,3,2,1,7])  
--Node 28 (Node 4 EmptyTree (Node 8 EmptyTree (Node 12 EmptyTree (Node 20 EmptyTree EmptyTree)))) EmptyTree




