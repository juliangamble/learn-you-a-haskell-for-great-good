data Person = Person String String Int Float String String deriving (Show)  

let guy = Person "Buddy" "Finklestein" 43 184.2 "526-2928" "Chocolate" 

guy  
--Person "Buddy" "Finklestein" 43 184.2 "526-2928" "Chocolate" 

:{
firstName :: Person -> String  
firstName (Person firstname _ _ _ _ _) = firstname  

lastName :: Person -> String  
lastName (Person _ lastname _ _ _ _) = lastname  

age :: Person -> Int  
age (Person _ _ age _ _ _) = age  
  
height :: Person -> Float  
height (Person _ _ _ height _ _) = height  
  
phoneNumber :: Person -> String  
phoneNumber (Person _ _ _ _ number _) = number  
  
flavor :: Person -> String  
flavor (Person _ _ _ _ _ flavor) = flavor  
:}



let guy = Person "Buddy" "Finklestein" 43 184.2 "526-2928" "Chocolate"  
firstName guy  
--"Buddy"  
height guy  
--184.2  
flavor guy  
--"Chocolate"  

:{
data Person' = Person' { firstName' :: String  
                     , lastName' :: String  
                     , age' :: Int  
                     , height' :: Float  
                     , phoneNumber' :: String  
                     , flavor' :: String  
                     } deriving (Show)   
:}

:t flavor  
--flavor :: Person -> String  
:t firstName  
--firstName :: Person -> String  


data Car = Car String String Int deriving (Show)  


Car "Ford" "Mustang" 1967  
--Car "Ford" "Mustang" 1967  



data Car = Car {company :: String, model :: String, year :: Int} deriving (Show)  

Car {company="Ford", model="Mustang", year=1967}  
--Car {company = "Ford", model = "Mustang", year = 1967}  

