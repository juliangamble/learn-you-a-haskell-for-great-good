(*) <$> [1,2,3] <*> [10,100,1000]  
--[10,100,1000,20,200,2000,30,300,3000]  

:{
{--
instance Monad [] where  
    return x = [x]  
    xs >>= f = concat (map f xs)  
    fail _ = []  
--}   
:}

[3,4,5] >>= \x -> [x,-x]  
--[3,-3,4,-4,5,-5]  

[] >>= \x -> ["bad","mad","rad"]  
--[]  
[1,2,3] >>= \x -> []  
--[]  


[1,2] >>= \n -> ['a','b'] >>= \ch -> return (n,ch)  
--[(1,'a'),(1,'b'),(2,'a'),(2,'b')]  

:{
{--
listOfTuples :: [(Int,Char)]  
listOfTuples = do  
    n <- [1,2]  
    ch <- ['a','b']  
    return (n,ch)  
--}   
:}

[ (n,ch) | n <- [1,2], ch <- ['a','b'] ]  
--[(1,'a'),(1,'b'),(2,'a'),(2,'b')]  

[ x | x <- [1..50], '7' `elem` show x ]  
--[7,17,27,37,47]  

import Control.Monad

:{
{--
class Monad m => MonadPlus m where
    mzero :: m a
    mplus :: m a -> m a -> m a
--}
:}

:{
{--
instance MonadPlus [] where
    mzero = []
    mplus = (++)
--}  
:}

:{
{--
guard :: (MonadPlus m) => Bool -> m ()
guard True = return ()
guard False = mzero
--}
:}


guard (5 > 2) :: Maybe ()
--Just ()  
guard (1 > 2) :: Maybe ()  
--Nothing  
guard (5 > 2) :: [()]  
--[()]  
guard (1 > 2) :: [()]  
--[]

[1..50] >>= (\x -> guard ('7' `elem` show x) >> return x)  
--[7,17,27,37,47] 

guard (5 > 2) >> return "cool" :: [String]  
--["cool"]  
guard (1 > 2) >> return "cool" :: [String]  
--[]  

:{
{--
sevensOnly :: [Int]  
sevensOnly = do  
    x <- [1..50]  
    guard ('7' `elem` show x)  
    return x  
--}
:}

[ x | x <- [1..50], '7' `elem` show x ]  
--[7,17,27,37,47] 


type KnightPos = (Int,Int)  


:{
moveKnight :: KnightPos -> [KnightPos]
moveKnight (c,r) = do
    (c',r') <- [(c+2,r-1),(c+2,r+1),(c-2,r-1),(c-2,r+1)
               ,(c+1,r-2),(c+1,r+2),(c-1,r-2),(c-1,r+2)
               ]
    guard (c' `elem` [1..8] && r' `elem` [1..8])
    return (c',r')
:}

:{
{--
moveKnight :: KnightPos -> [KnightPos]  
moveKnight (c,r) = filter onBoard  
    [(c+2,r-1),(c+2,r+1),(c-2,r-1),(c-2,r+1)  
    ,(c+1,r-2),(c+1,r+2),(c-1,r-2),(c-1,r+2)  
    ]  
    where onBoard (c,r) = c `elem` [1..8] && r `elem` [1..8]  
--}
:}

moveKnight (6,2)
--[(8,1),(8,3),(4,1),(4,3),(7,4),(5,4)]  
moveKnight (8,1)  
--[(6,2),(7,3)]  

:{
in3 :: KnightPos -> [KnightPos]  
in3 start = do   
    first <- moveKnight start  
    second <- moveKnight first  
    moveKnight second      
:}

in3 start = return start >>= moveKnight >>= moveKnight >>= moveKnight  


:{
canReachIn3 :: KnightPos -> KnightPos -> Bool
canReachIn3 start end = end `elem` in3 start   
:}

(6,2) `canReachIn3` (6,1)  
--True  

(6,2) `canReachIn3` (7,3)  
--False  

