(*) <$> Just 2 <*> Just 8  
--Just 16  
(++) <$> Just "klingon" <*> Nothing  
--Nothing  
(-) <$> [3,4] <*> [1,2,3]  
--[2,1,0,3,2,1] 


fmap (++"!") (Just "wisdom")  
Just "wisdom!"  
fmap (++"!") Nothing  
Nothing 

--import Data.Ord
--import GHC.Enum
import Data.Char

Just (+3) <*> Just 3
--Just 6
Nothing <*> Just "greed"
--Nothing
Just ord <*> Nothing
:{
--Instance Enum Ordering
--Just  fromEnum  <*> Nothing 
:}
--Nothing  

max <$> Just 3 <*> Just 6
--Just 6  
max <$> Just 3 <*> Nothing
--Nothing  

(\x -> Just (x+1)) 1  
--Just 2  
(\x -> Just (x+1)) 100  
--Just 101  

:{
applyMaybe :: Maybe a -> (a -> Maybe b) -> Maybe b
applyMaybe Nothing f  = Nothing
applyMaybe (Just x) f = f x
:}


Just 3 `applyMaybe` \x -> Just (x+1)  
--Just 4  
Just "smile" `applyMaybe` \x -> Just (x ++ " :)")  
--Just "smile :)"  
Nothing `applyMaybe` \x -> Just (x+1)  
--Nothing  
Nothing `applyMaybe` \x -> Just (x ++ " :)")  
--Nothing  


Just 3 `applyMaybe` \x -> if x > 2 then Just x else Nothing  
--Just 3  
Just 1 `applyMaybe` \x -> if x > 2 then Just x else Nothing  
--Nothing 


