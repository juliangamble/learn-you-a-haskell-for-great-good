--left identity
return 3 >>= (\x -> Just (x+100000))  
--Just 100003  
(\x -> Just (x+100000)) 3  
--Just 100003  

return "WoM" >>= (\x -> [x,x,x])  
--["WoM","WoM","WoM"]  
(\x -> [x,x,x]) "WoM"  
--["WoM","WoM","WoM"] 

--right identity
Just "move on up" >>= (\x -> return x)  
--Just "move on up"  
[1,2,3,4] >>= (\x -> return x)  
--[1,2,3,4]  
putStrLn "Wah!" >>= (\x -> return x)  
--Wah!  

--xs >>= f = concat (map f xs) 

--associativity

type Birds = Int  
type Pole = (Birds,Birds)  


:{
landLeft :: Birds -> Pole -> Maybe Pole
landLeft n (left,right)
    | abs ((left + n) - right) < 4 = Just (left + n, right)
    | otherwise                    = Nothing
:}

:{
landRight :: Birds -> Pole -> Maybe Pole
landRight n (left,right)
    | abs (left - (right + n)) < 4 = Just (left, right + n)
    | otherwise                    = Nothing
:}

return (0,0) >>= landRight 2 >>= landLeft 2 >>= landRight 2  
--Just (2,4) 



((return (0,0) >>= landRight 2) >>= landLeft 2) >>= landRight 2  
--Just (2,4) 

:{
return (0,0) >>= (\x ->
    landRight 2 x >>= (\y ->
        landLeft 2 y >>= (\z ->
            landRight 2 z)))
:}
--Just (2,4) 

:{
{--	
(.) :: (b -> c) -> (a -> b) -> (a -> c)  
f . g = (\x -> f (g x))  
--}
:}

:{
(<=<) :: (Monad m) => (b -> m c) -> (a -> m b) -> (a -> m c)  
f <=< g = (\x -> g x >>= f)  
:}

let f x = [x,-x]
let g x = [x*3,x*2]  
let h = f <=< g  
h 3  
--[9,-9,6,-6]  


