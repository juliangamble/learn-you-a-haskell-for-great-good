

newtype DiffList a = DiffList { getDiffList :: [a] -> [a] }  

:{
toDiffList :: [a] -> DiffList a  
toDiffList xs = DiffList (xs++)  
:}

:{
fromDiffList :: DiffList a -> [a]  
fromDiffList (DiffList f) = f []  
:}


:{
instance Monoid (DiffList a) where
    mempty = DiffList (\xs -> [] ++ xs)
    (DiffList f) `mappend` (DiffList g) = DiffList (\xs -> f (g xs))
:}

fromDiffList (toDiffList [1,2,3,4] `mappend` toDiffList [1,2,3])  
--[1,2,3,4,1,2,3]  


import Control.Monad.Writer

:{
--gcd' :: Int -> Int -> Writer (DiffList String) Int
--gcd' a b
gcdReverse :: Int -> Int -> Writer (DiffList String) Int
gcdReverse a b
    | b == 0 = do
        tell (toDiffList ["Finished with " ++ show a])
        return a
    | otherwise = do
        result <- gcdReverse b (a `mod` b)
        tell (toDiffList [show a ++ " mod " ++ show b ++ " = " ++ show (a `mod` b)])
        return result
:}

mapM_ putStrLn . fromDiffList . snd . runWriter $ gcdReverse 110 34  
--Finished with 2  
--8 mod 2 = 0  
--34 mod 8 = 2  
--110 mod 34 = 8 


:{
finalCountDown :: Int -> Writer (DiffList String) ()
finalCountDown 0 = do
    tell (toDiffList ["0"])
finalCountDown x = do
    finalCountDown (x-1)
    tell (toDiffList [show x])
:}


mapM_ putStrLn . fromDiffList . snd . runWriter $ finalCountDown 500000  
--0  
--1  
--2  
-- ...  
-- 500000  


:{
finalCountDown :: Int -> Writer [String] ()  
finalCountDown 0 = do  
    tell ["0"]  
finalCountDown x = do  
    finalCountDown (x-1)  
    tell [show x]  
:}

mapM_ putStrLn . snd . runWriter $ finalCountDown 10000 

