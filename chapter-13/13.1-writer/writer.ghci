:{
isBigGang :: Int -> Bool
isBigGang x = x > 9
:}

:{
isBigGang :: Int -> (Bool, String)  
isBigGang x = (x > 9, "Compared gang size to 9.")  
:}

isBigGang 3
--(False,"Compared gang size to 9.")  
isBigGang 30  
--(True,"Compared gang size to 9.") 

:{
applyLog :: (a,String) -> (a -> (b,String)) -> (b,String)
applyLog (x,log) f = let (y,newLog) = f x in (y,log ++ newLog)
:}

(3, "Smallish gang.") `applyLog` isBigGang  
--(False,"Smallish gang.Compared gang size to 9")  
(30, "A freaking platoon.") `applyLog` isBigGang  
--(True,"A freaking platoon.Compared gang size to 9")  


("Tobin","Got outlaw name.") `applyLog` (\x -> (length x, "Applied length."))  
--(5,"Got outlaw name.Applied length.")  
("Bathcat","Got outlaw name.") `applyLog` (\x -> (length x, "Applied length"))  
--(7,"Got outlaw name.Applied length")  

--applyLog :: (a,[c]) -> (a -> (b,[c])) -> (b,[c])  

import qualified Data.ByteString.Lazy as B

[1,2,3] `mappend` [4,5,6]  
--[1,2,3,4,5,6]  
B.pack [99,104,105] `mappend` B.pack [104,117,97,104,117,97]
--Chunk "chi" (Chunk "huahua" Empty)  
-- note that changes to Haskell package ByteString Lazy mean that Chunk is no longer shown!

:{
applyLog :: (Monoid m) => (a,m) -> (a -> (b,m)) -> (b,m)
applyLog (x,log) f = let (y,newLog) = f x in (y,log `mappend` newLog)
:}

import Data.Monoid  
  
type Food = String  
type Price = Sum Int  

:{
addDrink :: Food -> (Food,Price)
addDrink "beans" = ("milk", Sum 25)
addDrink "jerky" = ("whiskey", Sum 99)
addDrink _ = ("beer", Sum 30)
:}

Sum 3 `mappend` Sum 9  
--Sum {getSum = 12} 


("beans", Sum 10) `applyLog` addDrink  
--("milk",Sum {getSum = 35})  
("jerky", Sum 25) `applyLog` addDrink  
--("whiskey",Sum {getSum = 124})  
("dogmeat", Sum 5) `applyLog` addDrink  
--("beer",Sum {getSum = 35})  

("dogmeat", Sum 5) `applyLog` addDrink `applyLog` addDrink  
--("beer",Sum {getSum = 65})  

newtype Writer w a = Writer { runWriter :: (a, w) } 

:{
instance Functor (Writer w) where
  fmap f (Writer (a, w)) = Writer (f a, w)
:}

:{
instance Monoid w => Applicative (Writer w) where
  pure a = Writer (a, mempty)
  Writer (f, w) <*> Writer (a, w') = Writer (f a, w <> w')
:}

:{
instance (Monoid w) => Monad (Writer w) where
    return x = Writer (x, mempty)
    (Writer (x,v)) >>= f = let (Writer (y, v')) = f x in Writer (y, v `mappend` v')
:}


runWriter (return 3 :: Writer String Int)
--(3,"")
runWriter (return 3 :: Writer (Sum Int) Int)
--(3,Sum {getSum = 0})
runWriter (return 3 :: Writer (Product Int) Int)
--(3,Product {getProduct = 1})


import Control.Monad.Writer  

:{
logNumber :: Int -> Writer [String] Int  
logNumber x = Writer (x, ["Got number: " ++ show x])  
:}

:{
multWithLog :: Writer [String] Int  
multWithLog = do  
    a <- logNumber 3  
    b <- logNumber 5  
    return (a*b)  
:}

runWriter multWithLog
--(15,["Got number: 3","Got number: 5"])  

import Data.Monoid

:{
tell :: [String] -> Writer [String] Int
tell w = Writer (0, w)
:}

:{
logNumber :: Int -> Writer [String] Int
logNumber x = do
  tell ["Got number: " ++ show x]
  return x
:}

:{
multWithLog :: Writer [String] Int
multWithLog = do
    a <- logNumber 3
    b <- logNumber 5
    tell ["Gonna multiply these two"]
    return (a*b)
:}

runWriter multWithLog
--(15,["Got number: 3","Got number: 5","Gonna multiply these two"])  


:{
gcd' :: Int -> Int -> Int  
gcd' a b   
    | b == 0    = a  
    | otherwise = gcd' b (a `mod` b)
:}

gcd' 8 3
--1  


import Control.Monad.Writer  

:{  
gcd' :: Int -> Int -> Writer [String] Int
gcd' a b
    | b == 0 = do
        tell ["Finished with " ++ show a]
        return a
    | otherwise = do
        tell [show a ++ " mod " ++ show b ++ " = " ++ show (a `mod` b)]
        gcd' b (a `mod` b)
:}

:{  
gcd' :: Int -> Int -> Writer [String] Int
gcd' a b
    | b == 0 = Writer (a, ["Finished with " ++ show a]) 
    | otherwise = do
        tell [show a ++ " mod " ++ show b ++ " = " ++ show (a `mod` b)]
        gcd' b (a `mod` b)
:}

fst $ runWriter (gcd' 8 3)  
--1  

mapM_ putStrLn $ snd $ runWriter (gcd' 8 3)  
--8 mod 3 = 2  
--3 mod 2 = 1  
--2 mod 1 = 0  
--Finished with 1 


import Control.Monad.Writer  
  
:{
gcdReverse :: Int -> Int -> Writer [String] Int
gcdReverse a b
    | b == 0 = do
        tell ["Finished with " ++ show a]
        return a
    | otherwise = do
        result <- gcdReverse b (a `mod` b)
        tell [show a ++ " mod " ++ show b ++ " = " ++ show (a `mod` b)]
        return result
:}

mapM_ putStrLn $ snd $ runWriter (gcdReverse 8 3)  
--Finished with 1  
--2 mod 1 = 0  
--3 mod 2 = 1  
--8 mod 3 = 2  


