import Control.Monad

liftM (*3) (Just 8)  
--Just 24  
fmap (*3) (Just 8)  
--Just 24

import Control.Monad.Writer

--runWriter $ liftM not $ Writer (True, "chickpeas")  
runWriter $ liftM not $ writer (True, "chickpeas")  
--(False,"chickpeas")  
runWriter $ fmap not $ writer (True, "chickpeas")  
--(False,"chickpeas")  

--import Control.Applicative
import Control.Monad.State.Lazy

type Stack = [Int]

:{
pop :: State Stack Int
--pop = State $ \(x:xs) -> (x,xs)
pop =
    get >>=
    \(x:xs) -> put xs >>
    return x
:}


runState (liftM (+100) pop) [1,2,3,4]  
--(101,[2,3,4])  
runState (fmap (+100) pop) [1,2,3,4]  
--(101,[2,3,4])  

:{
{--
liftM :: (Monad m) => (a -> b) -> m a -> m b  
liftM f m = do  
    x <- m  
    return (f x)  
--}
:}

(+) <$> Just 3 <*> Just 5  
--Just 8  
(+) <$> Just 3 <*> Nothing  
--Nothing

:{
{--
(<*>) :: (Applicative f) => f (a -> b) -> f a -> f b  

ap :: (Monad m) => m (a -> b) -> m a -> m b  
ap mf m = do  
    f <- mf  
    x <- m  
    return (f x)
--}
:}


Just (+3) <*> Just 4  
--Just 7  
Just (+3) `ap` Just 4  
--Just 7  
[(+1),(+2),(+3)] <*> [10,11]  
--[11,12,12,13,13,14]  
[(+1),(+2),(+3)] `ap` [10,11]  
--[11,12,12,13,13,14]  

:{
{--
liftA2 :: (Applicative f) => (a -> b -> c) -> f a -> f b -> f c  
liftA2 f x y = f <$> x <*> y  
--}
:}

--join :: (Monad m) => m (m a) -> m a  



join (Just (Just 9))  
--Just 9  
join (Just Nothing)  
--Nothing  
join Nothing  
--Nothing  

join [[1,2,3],[4,5,6]]  
--[1,2,3,4,5,6]

--runWriter $ join (Writer (Writer (1,"aaa"),"bbb"))  
runWriter $ join (writer (writer (1,"aaa"),"bbb"))  
--(1,"bbbaaa") 


join (Right (Right 9)) :: Either String Int  
--Right 9  
join (Right (Left "error")) :: Either String Int  
--Left "error"  
join (Left "error") :: Either String Int  
--Left "error"  

:{
push :: Int -> State Stack ()
--push a = State $ \xs -> ((),a:xs)
push a = do
    xs <- get
    put (a:xs)
    return ()
:}

--runState (join (State $ \s -> (push 10,1:2:s))) [0,0,0]  
runState (join (state $ \s -> (push 10,1:2:s))) [0,0,0]  
--((),[10,1,2,0,0,0])  

:{
{--
join :: (Monad m) => m (m a) -> m a  
join mm = do  
    m <- mm  
    m  
--}
:}

:{
joinedMaybes :: Maybe Int
joinedMaybes = do
    m <- Just (Just 8)
    m
:}

--filter :: (a -> Bool) -> [a] -> [a]  

--filterM :: (Monad m) => (a -> m Bool) -> [a] -> m [a]  


filter (\x -> x < 4) [9,1,5,2,10,3]  
--[1,2,3] 

:{
keepSmall :: Int -> Writer [String] Bool
keepSmall x
    | x < 4 = do
        tell ["Keeping " ++ show x]
        return True
    | otherwise = do
        tell [show x ++ " is too large, throwing it away"]
        return False
:}

fst $ runWriter $ filterM keepSmall [9,1,5,2,10,3]  
--[1,2,3]  


mapM_ putStrLn $ snd $ runWriter $ filterM keepSmall [9,1,5,2,10,3]  
--9 is too large, throwing it away  
--Keeping 1  
--5 is too large, throwing it away  
--Keeping 2  
--10 is too large, throwing it away  
--Keeping 3  

:{
powerset :: [a] -> [[a]]
powerset xs = filterM (\x -> [True, False]) xs
:}


powerset [1,2,3]  
--[[1,2,3],[1,2],[1,3],[1],[2,3],[2],[3],[]]  


--foldl :: (a -> b -> a) -> a -> [b] -> a  
--foldM :: (Monad m) => (a -> b -> m a) -> a -> [b] -> m a  
foldl (\acc x -> acc + x) 0 [2,8,3,1]
--14

:{
binSmalls :: Int -> Int -> Maybe Int
binSmalls acc x
    | x > 9     = Nothing
    | otherwise = Just (acc + x)
:}

foldM binSmalls 0 [2,8,3,1]  
--Just 14  
foldM binSmalls 0 [2,11,3,1]  
--Nothing


import Data.List  

:{
solveRPN :: String -> Double
solveRPN = head . foldl foldingFunction [] . words
:}

:{
foldingFunction :: [Double] -> String -> [Double]
foldingFunction (x:y:ys) "*" = (x * y):ys
foldingFunction (x:y:ys) "+" = (x + y):ys
foldingFunction (x:y:ys) "-" = (y - x):ys
foldingFunction xs numberString = read numberString:xs
:}


--foldingFunction :: [Double] -> String -> Maybe [Double]  

:{
readMaybe :: (Read a) => String -> Maybe a
readMaybe st = case reads st of [(x,"")] -> Just x
                                _ -> Nothing
:}


readMaybe "1" :: Maybe Int  
--Just 1  
readMaybe "GO TO HELL" :: Maybe Int  
--Nothing  


:{
foldingFunction :: [Double] -> String -> Maybe [Double]
foldingFunction (x:y:ys) "*" = return ((x * y):ys)
foldingFunction (x:y:ys) "+" = return ((x + y):ys)
foldingFunction (x:y:ys) "-" = return ((y - x):ys)
foldingFunction xs numberString = liftM (:xs) (readMaybe numberString)
:}

foldingFunction [3,2] "*"  
--Just [6.0]  
foldingFunction [3,2] "-"  
--Just [-1.0]  
foldingFunction [] "*"  
--Nothing  
foldingFunction [] "1"  
--Just [1.0]  
foldingFunction [] "1 wawawawa"  
--Nothing  

:{
solveRPN :: String -> Maybe Double
solveRPN st = do
    [result] <- foldM foldingFunction [] (words st)
    return result
:}

solveRPN "1 2 * 4 +"  
--Just 6.0  
solveRPN "1 2 * 4 + 5 *"  
--Just 30.0  
solveRPN "1 2 * 4"  
--Nothing  
solveRPN "1 8 wharglbllargh"  
--Nothing 


let f = (+1) . (*100)  
f 4  
--401  
let g = (\x -> return (x+1)) <=< (\x -> return (x*100))  
Just 4 >>= g  
--Just 401  


let f = foldr (.) id [(+1),(*100),(+1)]  
f 1  
--201  

type KnightPos = (Int,Int)  


:{
moveKnight :: KnightPos -> [KnightPos]
moveKnight (c,r) = do
    (c',r') <- [(c+2,r-1),(c+2,r+1),(c-2,r-1),(c-2,r+1)
               ,(c+1,r-2),(c+1,r+2),(c-1,r-2),(c-1,r+2)
               ]
    guard (c' `elem` [1..8] && r' `elem` [1..8])
    return (c',r')
:}


in3 start = return start >>= moveKnight >>= moveKnight >>= moveKnight   


:{
canReachIn3 :: KnightPos -> KnightPos -> Bool
canReachIn3 start end = end `elem` in3 start
:}


:{
inMany :: Int -> KnightPos -> [KnightPos]
inMany x start = return start >>= foldr (<=<) return (replicate x moveKnight)
:}

:{
{--
canReachIn3 :: KnightPos -> KnightPos -> Bool
canReachIn3 start end = end `elem` in3 start   
--}
:}


:{
canReachIn :: Int -> KnightPos -> KnightPos -> Bool
canReachIn x start end = end `elem` inMany x start
:}



