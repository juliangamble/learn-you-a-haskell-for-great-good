:t (==)  
--(==) :: (Eq a) => a -> a -> Bool  

5 == 5  
--True  
5 /= 5  
--False  
'a' == 'a'  
--True  
"Ho Ho" == "Ho Ho"  
--True  
3.432 == 3.432  
--True  

:t (>)  
--(>) :: (Ord a) => a -> a -> Bool  


"Abrakadabra" < "Zebra"  
--True  
"Abrakadabra" `compare` "Zebra"  
--LT  
5 >= 2  
--True  
5 `compare` 3  
--GT  


 show 3  
--"3"  
show 5.334  
--"5.334"  
show True  
--"True" 

read "True" || False  
--True  
read "8.2" + 3.8  
--12.0  
read "5" - 2  
--3  
read "[1,2,3,4]" ++ [3]  
---[1,2,3,4,3]  


read "4"  
:{
{--
<interactive>:1:0:  
    Ambiguous type variable `a' in the constraint:  
      `Read a' arising from a use of `read' at <interactive>:1:0-7  
    Probable fix: add a type signature that fixes these type variable(s)  
--}
:}

:t read  
--read :: (Read a) => String -> a  


read "5" :: Int  
--5  
read "5" :: Float  
--5.0  
(read "5" :: Float) * 4  
--20.0  
read "[1,2,3,4]" :: [Int]  
--[1,2,3,4]  
read "(3, 'a')" :: (Int, Char)  
--(3, 'a')  


['a'..'e']  
--"abcde"  
[LT .. GT]  
--[LT,EQ,GT]  
[3 .. 5]  
--[3,4,5]  
succ 'B'  
--'C'  

minBound :: Int  
---2147483648  
maxBound :: Char  
--'\1114111'  
maxBound :: Bool  
--True  
minBound :: Bool  
--False  

maxBound :: (Bool, Int, Char)  
--(True,2147483647,'\1114111')  

:t 20  
--20 :: (Num t) => t  


20 :: Int  
--20  
20 :: Integer  
--20  
20 :: Float  
--20.0  
20 :: Double  
--20.0  


:t (*)  
--(*) :: (Num a) => a -> a -> a  

